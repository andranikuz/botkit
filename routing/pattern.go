package routing

import (
	"github.com/andranikuz/botkit/core"
	"regexp"
	"strings"
)

// RoutePattern –æ–ø–∏—Å—ã–≤–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –º–∞—Ä—à—Ä—É—Ç–∞
// –†–µ–∞–ª–∏–∑—É–µ—Ç core.RoutePattern –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
type RoutePattern struct {
	// Patterns —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –º–∞—Ç—á–∏–Ω–≥–∞
	Patterns []string

	// Handler —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	Handler core.HandlerFunc

	// Priority –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–±–æ–ª—å—à–µ = –≤—ã—à–µ)
	Priority int

	// Type —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞
	Type RouteType

	// Security –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	Security SecurityRule

	// Meta –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞
	Meta RouteMeta

	// Module –∏–º—è –º–æ–¥—É–ª—è-–≤–ª–∞–¥–µ–ª—å—Ü–∞
	Module string

	// compiled —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
	compiled []*regexp.Regexp
}

// RouteType —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞
type RouteType string

const (
	RouteTypeCommand  RouteType = "command"
	RouteTypeCallback RouteType = "callback"
	RouteTypeMessage  RouteType = "message"
	RouteTypeRegex    RouteType = "regex"
	RouteTypeWildcard RouteType = "wildcard"
)

// RouteMeta –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞
type RouteMeta struct {
	// Name –∏–º—è –º–∞—Ä—à—Ä—É—Ç–∞
	Name string

	// Description –æ–ø–∏—Å–∞–Ω–∏–µ
	Description string

	// Category –∫–∞—Ç–µ–≥–æ—Ä–∏—è
	Category string

	// Tags —Ç–µ–≥–∏
	Tags []string

	// Hidden —Å–∫—Ä—ã—Ç—ã–π –º–∞—Ä—à—Ä—É—Ç (–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ help)
	Hidden bool

	// Deprecated —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–∞—Ä—à—Ä—É—Ç
	Deprecated bool

	// Version –≤–µ—Ä—Å–∏—è –º–∞—Ä—à—Ä—É—Ç–∞
	Version string

	// Examples –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	Examples []string
}

// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ core.RoutePattern –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

// GetPattern –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã
func (r RoutePattern) GetPattern() []string {
	return r.Patterns
}

// GetHandler –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
func (r RoutePattern) GetHandler() core.HandlerFunc {
	return r.Handler
}

// GetPriority –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
func (r RoutePattern) GetPriority() int {
	return r.Priority
}

// GetType –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞
func (r RoutePattern) GetType() string {
	return string(r.Type)
}

// Compile –∫–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
func (r *RoutePattern) Compile() error {
	r.compiled = make([]*regexp.Regexp, 0, len(r.Patterns))

	for _, pattern := range r.Patterns {
		// Wildcard –ø–∞—Ç—Ç–µ—Ä–Ω
		if pattern == "*" {
			// Wildcard –º–∞—Ç—á–∏—Ç –≤—Å–µ
			r.compiled = append(r.compiled, regexp.MustCompile(".*"))
			continue
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤ regex
		regexPattern := r.patternToRegex(pattern)

		compiled, err := regexp.Compile(regexPattern)
		if err != nil {
			return err
		}

		r.compiled = append(r.compiled, compiled)
	}

	return nil
}

// Match –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—É
func (r *RoutePattern) Match(text string) (bool, map[string]string) {
	text = strings.TrimSpace(strings.ToLower(text))

	// –ï—Å–ª–∏ –Ω–µ—Ç —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º
	if len(r.compiled) == 0 {
		if err := r.Compile(); err != nil {
			return false, nil
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
	for i, re := range r.compiled {
		if matches := re.FindStringSubmatch(text); matches != nil {
			// –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã
			params := make(map[string]string)

			// –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω –±–µ–∑ –≥—Ä—É–ø–ø
			if len(matches) == 1 {
				return true, params
			}

			// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø
			for i, name := range re.SubexpNames() {
				if i > 0 && i < len(matches) && name != "" {
					params[name] = matches[i]
				}
			}

			// –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
			for i := 1; i < len(matches); i++ {
				params[string(rune('0'+i))] = matches[i]
			}

			// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
			params["_pattern"] = r.Patterns[i]

			return true, params
		}
	}

	return false, nil
}

// patternToRegex –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
func (r *RoutePattern) patternToRegex(pattern string) string {
	// Escape —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã regex
	pattern = regexp.QuoteMeta(pattern)

	// –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –Ω–∞ –≥—Ä—É–ø–ø—ã –∑–∞—Ö–≤–∞—Ç–∞
	// {id} -> (?P<id>\d+)
	// {name} -> (?P<name>\w+)
	// {text} -> (?P<text>.+)

	replacements := map[string]string{
		`\{id\}`:     `(?P<id>\d+)`,
		`\{user\}`:   `(?P<user>\d+)`,
		`\{name\}`:   `(?P<name>\w+)`,
		`\{text\}`:   `(?P<text>.+)`,
		`\{amount\}`: `(?P<amount>\d+)`,
		`\{any\}`:    `(?P<any>.+)`,
	}

	for old, new := range replacements {
		pattern = regexp.MustCompile(old).ReplaceAllString(pattern, new)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —è–∫–æ—Ä—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
	return "^" + pattern + "$"
}

// MatchType –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
func (r *RoutePattern) MatchType(ctx core.UniversalContext) bool {
	switch r.Type {
	case RouteTypeCommand:
		return ctx.IsCommand()
	case RouteTypeCallback:
		return ctx.IsCallback()
	case RouteTypeMessage:
		return ctx.IsMessage()
	case RouteTypeRegex, RouteTypeWildcard:
		return true
	default:
		return false
	}
}

// CheckSecurity –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func (r *RoutePattern) CheckSecurity(ctx core.UniversalContext) error {
	return r.Security.Check(ctx)
}

// Execute –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞
func (r *RoutePattern) Execute(ctx core.UniversalContext) core.Response {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
	if err := r.CheckSecurity(ctx); err != nil {
		return core.NewMessage("üö´ " + err.Error())
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	return r.Handler(ctx)
}

// RouteBuilder –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –º–∞—Ä—à—Ä—É—Ç–æ–≤
type RouteBuilder struct {
	pattern *RoutePattern
}

// NewRoute —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å –º–∞—Ä—à—Ä—É—Ç–∞
func NewRoute(patterns ...string) *RouteBuilder {
	return &RouteBuilder{
		pattern: &RoutePattern{
			Patterns: patterns,
			Priority: 50,
			Type:     RouteTypeCommand,
			Security: SecurityRule{},
			Meta:     RouteMeta{},
		},
	}
}

// Handler —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
func (b *RouteBuilder) Handler(h core.HandlerFunc) *RouteBuilder {
	b.pattern.Handler = h
	return b
}

// Priority —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
func (b *RouteBuilder) Priority(p int) *RouteBuilder {
	b.pattern.Priority = p
	return b
}

// Type —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–∏–ø –º–∞—Ä—à—Ä—É—Ç–∞
func (b *RouteBuilder) Type(t RouteType) *RouteBuilder {
	b.pattern.Type = t
	return b
}

// RequireAuth —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
func (b *RouteBuilder) RequireAuth() *RouteBuilder {
	b.pattern.Security.RequireAuth = true
	return b
}

// RequireRoles —Ç—Ä–µ–±—É–µ—Ç —Ä–æ–ª–∏
func (b *RouteBuilder) RequireRoles(roles ...string) *RouteBuilder {
	b.pattern.Security.RequireRoles = roles
	return b
}

// RequirePermissions —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∞–≤–∞
func (b *RouteBuilder) RequirePermissions(perms ...string) *RouteBuilder {
	b.pattern.Security.RequirePermissions = perms
	return b
}

// RateLimit —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
func (b *RouteBuilder) RateLimit(requests, window int) *RouteBuilder {
	b.pattern.Security.RateLimit = &RateLimitConfig{
		Requests: requests,
		Window:   window,
	}
	return b
}

// Meta —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
func (b *RouteBuilder) Meta(name, description string) *RouteBuilder {
	b.pattern.Meta.Name = name
	b.pattern.Meta.Description = description
	return b
}

// Tags —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–≥–∏
func (b *RouteBuilder) Tags(tags ...string) *RouteBuilder {
	b.pattern.Meta.Tags = tags
	return b
}

// Hidden —Å–∫—Ä—ã–≤–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç
func (b *RouteBuilder) Hidden() *RouteBuilder {
	b.pattern.Meta.Hidden = true
	return b
}

// Build –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
func (b *RouteBuilder) Build() RoutePattern {
	return *b.pattern
}
