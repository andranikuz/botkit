package middleware

import (
	"context"
	"fmt"
	"runtime/debug"
	"time"

	"github.com/andranikuz/botkit/core"
	"github.com/andranikuz/botkit/routing"
)

// Ensure all middleware types implement routing.Middleware interface
var (
	_ routing.Middleware = (*BaseMiddleware)(nil)
	_ routing.Middleware = (*LoggingMiddleware)(nil)
	_ routing.Middleware = (*RecoveryMiddleware)(nil)
	_ routing.Middleware = (*AuthMiddleware)(nil)
	_ routing.Middleware = (*RateLimitMiddleware)(nil)
	_ routing.Middleware = (*MetricsMiddleware)(nil)
	_ routing.Middleware = (*ContextMiddleware)(nil)
	_ routing.Middleware = (*ValidationMiddleware)(nil)
)

// BaseMiddleware –±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è middleware
type BaseMiddleware struct {
	name     string
	priority int
	handler  func(core.UniversalContext, core.HandlerFunc) core.Response
}

// NewMiddleware —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π middleware
func NewMiddleware(name string, priority int, handler func(core.UniversalContext, core.HandlerFunc) core.Response) *BaseMiddleware {
	return &BaseMiddleware{
		name:     name,
		priority: priority,
		handler:  handler,
	}
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è
func (m *BaseMiddleware) Name() string {
	return m.name
}

// Priority –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
func (m *BaseMiddleware) Priority() int {
	return m.priority
}

// Process –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
func (m *BaseMiddleware) Process(ctx core.UniversalContext, next core.HandlerFunc) core.Response {
	return m.handler(ctx, next)
}

// LoggingMiddleware middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
type LoggingMiddleware struct {
	logger   core.Logger
	priority int
}

// NewLoggingMiddleware —Å–æ–∑–¥–∞–µ—Ç middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
func NewLoggingMiddleware(logger core.Logger, priority int) *LoggingMiddleware {
	return &LoggingMiddleware{
		logger:   logger,
		priority: priority,
	}
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è
func (m *LoggingMiddleware) Name() string {
	return "logging"
}

// Priority –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
func (m *LoggingMiddleware) Priority() int {
	return m.priority
}

// Process –ª–æ–≥–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç
func (m *LoggingMiddleware) Process(ctx core.UniversalContext, next core.HandlerFunc) core.Response {
	start := time.Now()

	// –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
	m.logger.Info("Request received",
		"user_id", ctx.GetUserID(),
		"chat_id", ctx.GetChatID(),
		"text", ctx.GetText(),
		"is_command", ctx.IsCommand(),
		"is_callback", ctx.IsCallback(),
	)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	response := next(ctx)

	// –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	duration := time.Since(start)
	m.logger.Info("Request processed",
		"user_id", ctx.GetUserID(),
		"duration_ms", duration.Milliseconds(),
		"response_type", fmt.Sprintf("%T", response),
	)

	return response
}

// RecoveryMiddleware middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–Ω–∏–∫
type RecoveryMiddleware struct {
	logger   core.Logger
	priority int
}

// NewRecoveryMiddleware —Å–æ–∑–¥–∞–µ—Ç middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–Ω–∏–∫
func NewRecoveryMiddleware(logger core.Logger, priority int) *RecoveryMiddleware {
	return &RecoveryMiddleware{
		logger:   logger,
		priority: priority,
	}
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è
func (m *RecoveryMiddleware) Name() string {
	return "recovery"
}

// Priority –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
func (m *RecoveryMiddleware) Priority() int {
	return m.priority
}

// Process –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–Ω–∏–∫—É
func (m *RecoveryMiddleware) Process(ctx core.UniversalContext, next core.HandlerFunc) (response core.Response) {
	defer func() {
		if r := recover(); r != nil {
			// –õ–æ–≥–∏—Ä—É–µ–º –ø–∞–Ω–∏–∫—É
			m.logger.Error("Panic recovered",
				"panic", r,
				"stack", string(debug.Stack()),
				"user_id", ctx.GetUserID(),
				"text", ctx.GetText(),
			)

			// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
			response = core.NewMessage("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
		}
	}()

	return next(ctx)
}

// AuthMiddleware middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
type AuthMiddleware struct {
	checkAuth func(core.UniversalContext) bool
	priority  int
}

// NewAuthMiddleware —Å–æ–∑–¥–∞–µ—Ç middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
func NewAuthMiddleware(checkAuth func(core.UniversalContext) bool, priority int) *AuthMiddleware {
	return &AuthMiddleware{
		checkAuth: checkAuth,
		priority:  priority,
	}
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è
func (m *AuthMiddleware) Name() string {
	return "auth"
}

// Priority –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
func (m *AuthMiddleware) Priority() int {
	return m.priority
}

// Process –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
func (m *AuthMiddleware) Process(ctx core.UniversalContext, next core.HandlerFunc) core.Response {
	if !m.checkAuth(ctx) {
		return core.NewMessage("üîí –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è.")
	}

	return next(ctx)
}

// RateLimitMiddleware middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤
type RateLimitMiddleware struct {
	limiter  *routing.RateLimiter
	priority int
}

// NewRateLimitMiddleware —Å–æ–∑–¥–∞–µ—Ç middleware –¥–ª—è rate limiting
func NewRateLimitMiddleware(limiter *routing.RateLimiter, priority int) *RateLimitMiddleware {
	return &RateLimitMiddleware{
		limiter:  limiter,
		priority: priority,
	}
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è
func (m *RateLimitMiddleware) Name() string {
	return "rate_limit"
}

// Priority –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
func (m *RateLimitMiddleware) Priority() int {
	return m.priority
}

// Process –ø—Ä–æ–≤–µ—Ä—è–µ—Ç rate limit
func (m *RateLimitMiddleware) Process(ctx core.UniversalContext, next core.HandlerFunc) core.Response {
	if !m.limiter.Allow(ctx) {
		return core.NewMessage("‚è±Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
	}

	return next(ctx)
}

// MetricsMiddleware middleware –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
type MetricsMiddleware struct {
	metrics  core.Metrics
	priority int
}

// NewMetricsMiddleware —Å–æ–∑–¥–∞–µ—Ç middleware –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
func NewMetricsMiddleware(metrics core.Metrics, priority int) *MetricsMiddleware {
	return &MetricsMiddleware{
		metrics:  metrics,
		priority: priority,
	}
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è
func (m *MetricsMiddleware) Name() string {
	return "metrics"
}

// Priority –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
func (m *MetricsMiddleware) Priority() int {
	return m.priority
}

// Process —Å–æ–±–∏—Ä–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
func (m *MetricsMiddleware) Process(ctx core.UniversalContext, next core.HandlerFunc) core.Response {
	start := time.Now()

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
	if m.metrics != nil {
		m.metrics.Counter("requests.total", 1,
			"type", getRequestType(ctx),
		)
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	response := next(ctx)

	// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
	if m.metrics != nil {
		duration := time.Since(start)
		m.metrics.Timing("requests.duration", int64(duration.Milliseconds()),
			"type", getRequestType(ctx),
		)
	}

	return response
}

func getRequestType(ctx core.UniversalContext) string {
	if ctx.IsCommand() {
		return "command"
	}
	if ctx.IsCallback() {
		return "callback"
	}
	return "message"
}

// ContextMiddleware middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
type ContextMiddleware struct {
	contextFunc func(core.UniversalContext) context.Context
	priority    int
}

// NewContextMiddleware —Å–æ–∑–¥–∞–µ—Ç middleware –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
func NewContextMiddleware(contextFunc func(core.UniversalContext) context.Context, priority int) *ContextMiddleware {
	return &ContextMiddleware{
		contextFunc: contextFunc,
		priority:    priority,
	}
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è
func (m *ContextMiddleware) Name() string {
	return "context"
}

// Priority –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
func (m *ContextMiddleware) Priority() int {
	return m.priority
}

// Process –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç
func (m *ContextMiddleware) Process(ctx core.UniversalContext, next core.HandlerFunc) core.Response {
	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º
	reqCtx := m.contextFunc(ctx)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ UniversalContext
	ctx.SetParam("_context", reqCtx)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	select {
	case <-reqCtx.Done():
		return core.NewMessage("‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–µ–∫–ª–æ.")
	default:
		return next(ctx)
	}
}

// ValidationMiddleware middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
type ValidationMiddleware struct {
	validator func(core.UniversalContext) error
	priority  int
}

// NewValidationMiddleware —Å–æ–∑–¥–∞–µ—Ç middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
func NewValidationMiddleware(validator func(core.UniversalContext) error, priority int) *ValidationMiddleware {
	return &ValidationMiddleware{
		validator: validator,
		priority:  priority,
	}
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è
func (m *ValidationMiddleware) Name() string {
	return "validation"
}

// Priority –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
func (m *ValidationMiddleware) Priority() int {
	return m.priority
}

// Process –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ
func (m *ValidationMiddleware) Process(ctx core.UniversalContext, next core.HandlerFunc) core.Response {
	if err := m.validator(ctx); err != nil {
		return core.NewMessage(fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: %s", err.Error()))
	}

	return next(ctx)
}

// Chain —Å–æ–∑–¥–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É middleware
func Chain(middlewares ...routing.Middleware) func(core.HandlerFunc) core.HandlerFunc {
	return func(final core.HandlerFunc) core.HandlerFunc {
		return func(ctx core.UniversalContext) core.Response {
			// –°—Ç—Ä–æ–∏–º —Ü–µ–ø–æ—á–∫—É –æ—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫ –ø–µ—Ä–≤–æ–º—É
			handler := final
			for i := len(middlewares) - 1; i >= 0; i-- {
				mw := middlewares[i]
				next := handler
				handler = func(c core.UniversalContext) core.Response {
					return mw.Process(c, next)
				}
			}
			return handler(ctx)
		}
	}
}

// MiddlewareFunc –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π –∫–∞–∫ middleware
type MiddlewareFunc func(core.UniversalContext, core.HandlerFunc) core.Response

// Process —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Middleware
func (f MiddlewareFunc) Process(ctx core.UniversalContext, next core.HandlerFunc) core.Response {
	return f(ctx, next)
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è
func (f MiddlewareFunc) Name() string {
	return "func"
}

// Priority –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
func (f MiddlewareFunc) Priority() int {
	return 50
}
