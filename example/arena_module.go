package example

import (
	"context"
	"fmt"
	"github.com/andranikuz/botkit/core"
	"github.com/andranikuz/botkit/events"
	"github.com/andranikuz/botkit/routing"
	"time"
)

// ArenaModule –ø—Ä–∏–º–µ—Ä –º–æ–¥—É–ª—è –∞—Ä–µ–Ω—ã
type ArenaModule struct {
	name         string
	version      string
	eventBus     core.EventBus
	logger       core.Logger
	arenaService ArenaService // –°–µ—Ä–≤–∏—Å —Å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π
}

// ArenaService –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–µ—Ä–≤–∏—Å–∞ –∞—Ä–µ–Ω—ã
type ArenaService interface {
	GetOpponents(userID int64) ([]Opponent, error)
	StartFight(userID, opponentID int64) (*FightResult, error)
	GetStats(userID int64) (*ArenaStats, error)
}

// NewArenaModule —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å –∞—Ä–µ–Ω—ã
func NewArenaModule() *ArenaModule {
	return &ArenaModule{
		name:    "arena",
		version: "1.0.0",
	}
}

// Name –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –º–æ–¥—É–ª—è
func (m *ArenaModule) Name() string {
	return m.name
}

// Version –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä—Å–∏—é –º–æ–¥—É–ª—è
func (m *ArenaModule) Version() string {
	return m.version
}

// Init –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å
func (m *ArenaModule) Init(deps core.Dependencies) error {
	m.eventBus = deps.EventBus()
	m.logger = deps.Logger()

	// –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å –∞—Ä–µ–Ω—ã –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	if service, ok := deps.Get("arenaService"); ok {
		m.arenaService = service.(ArenaService)
	}

	m.logger.Info("Arena module initialized", "version", m.version)

	return nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–¥—É–ª—å
func (m *ArenaModule) Start(ctx context.Context) error {
	m.logger.Info("Arena module started")

	// –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
	event := events.NewModuleLifecycleEvent(m.name, "started", "healthy")
	m.eventBus.PublishAsync(ctx, event)

	return nil
}

// Stop –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–¥—É–ª—å
func (m *ArenaModule) Stop(ctx context.Context) error {
	m.logger.Info("Arena module stopped")

	// –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
	event := events.NewModuleLifecycleEvent(m.name, "stopped", "stopped")
	m.eventBus.PublishAsync(ctx, event)

	return nil
}

// Routes –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Ä—à—Ä—É—Ç—ã –º–æ–¥—É–ª—è
func (m *ArenaModule) Routes() []routing.RoutePattern {
	return []routing.RoutePattern{
		// –ö–æ–º–∞–Ω–¥—ã
		routing.NewRoute("–∞—Ä–µ–Ω–∞", "/arena").
			Handler(m.handleArenaMenu).
			RequireAuth().
			Meta("arena_menu", "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞—Ä–µ–Ω—ã").
			Build(),

		routing.NewRoute("–±–æ–π", "/fight").
			Handler(m.handleFightCommand).
			RequireAuth().
			RateLimit(5, 60). // 5 –±–æ–µ–≤ –≤ –º–∏–Ω—É—Ç—É
			Meta("start_fight", "–ù–∞—á–∞—Ç—å –±–æ–π").
			Build(),

		routing.NewRoute("—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä–µ–Ω—ã", "/arena_stats").
			Handler(m.handleStats).
			RequireAuth().
			Meta("arena_stats", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–µ–≤").
			Build(),

		// Callback'–∏
		routing.NewRoute("arena:fight").
			Type(routing.RouteTypeCallback).
			Handler(m.handleFightCallback).
			RequireAuth().
			Meta("fight_callback", "–í—ã–±–æ—Ä –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞").
			Build(),

		routing.NewRoute("arena:opponent:{id}").
			Type(routing.RouteTypeCallback).
			Handler(m.handleOpponentSelect).
			RequireAuth().
			Meta("opponent_select", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–æ—è").
			Build(),

		routing.NewRoute("arena:back").
			Type(routing.RouteTypeCallback).
			Handler(m.handleArenaMenu).
			RequireAuth().
			Meta("back_to_menu", "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é").
			Build(),
	}
}

// Events –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
func (m *ArenaModule) Events() []core.EventSubscription {
	return []core.EventSubscription{
		{
			EventType: "user.level_up",
			Handler:   m.handleLevelUp,
			Priority:  50,
		},
		{
			EventType: "arena.fight_completed",
			Handler:   m.handleFightCompleted,
			Priority:  100,
		},
	}
}

// APIHandlers –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTTP API handlers
func (m *ArenaModule) APIHandlers() []core.APIHandler {
	return []core.APIHandler{
		{
			Method:      "GET",
			Path:        "/opponents",
			Handler:     m.apiGetOpponents,
			Description: "Get list of opponents",
		},
		{
			Method:      "POST",
			Path:        "/fight",
			Handler:     m.apiStartFight,
			Description: "Start a fight",
		},
		{
			Method:      "GET",
			Path:        "/stats",
			Handler:     m.apiGetStats,
			Description: "Get arena statistics",
		},
	}
}

// === Handlers ===

// handleArenaMenu –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞—Ä–µ–Ω—ã
func (m *ArenaModule) handleArenaMenu(ctx core.UniversalContext) core.Response {
	text := `‚öîÔ∏è <b>–ê—Ä–µ–Ω–∞</b>
	
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∞—Ä–µ–Ω—É!
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å—Ä–∞–∂–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏.

üí∞ –ü–æ–±–µ–¥–∞: +100 –º–æ–Ω–µ—Ç
üìà –†–µ–π—Ç–∏–Ω–≥: +10 –æ—á–∫–æ–≤
‚ö° –≠–Ω–µ—Ä–≥–∏—è: -5`

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	keyboard := NewArenaKeyboard().MainMenu()

	return core.NewMessage(text).
		WithKeyboard(keyboard).
		WithParseMode(core.ParseModeHTML)
}

// handleFightCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –±–æ—è
func (m *ArenaModule) handleFightCommand(ctx core.UniversalContext) core.Response {
	userID := ctx.GetUserID()

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤
	opponents, err := m.arenaService.GetOpponents(userID)
	if err != nil {
		return core.NewMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤")
	}

	if len(opponents) == 0 {
		return core.NewMessage("üîç –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–æ–≤")
	}

	text := "‚öîÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞:</b>\n\n"

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º–∏
	keyboard := NewArenaKeyboard()

	for i, opp := range opponents {
		text += fmt.Sprintf("%d. %s (–£—Ä. %d, –°–∏–ª–∞: %d)\n",
			i+1, opp.Name, opp.Level, opp.Power)

		keyboard.AddOpponent(opp)
	}

	keyboard.AddBackButton()

	return core.NewMessage(text).
		WithKeyboard(keyboard.Build()).
		WithParseMode(core.ParseModeHTML)
}

// handleFightCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –≤—ã–±–æ—Ä–∞ –±–æ—è
func (m *ArenaModule) handleFightCallback(ctx core.UniversalContext) core.Response {
	return m.handleFightCommand(ctx)
}

// handleOpponentSelect –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
func (m *ArenaModule) handleOpponentSelect(ctx core.UniversalContext) core.Response {
	opponentID, ok := ctx.GetIntParam("id")
	if !ok {
		return core.NewMessage("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞")
	}

	userID := ctx.GetUserID()

	// –ù–∞—á–∏–Ω–∞–µ–º –±–æ–π
	result, err := m.arenaService.StartFight(userID, int64(opponentID))
	if err != nil {
		return core.NewMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –±–æ—è: " + err.Error())
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ –±–æ–µ
	text := m.formatFightResult(result)

	// –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –±–æ—è
	event := events.NewEvent("arena.fight_completed", m.name)
	event.SetUserID(userID).
		SetData("opponent_id", opponentID).
		SetData("winner", result.Winner).
		SetData("reward", result.Reward)

	m.eventBus.PublishAsync(ctx.Context(), event)

	// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –±–æ—è
	keyboard := NewArenaKeyboard().AfterFight()

	return core.NewEditMessage(ctx.GetMessageID(), text).
		WithKeyboard(keyboard).
		WithParseMode(core.ParseModeHTML)
}

// handleStats –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (m *ArenaModule) handleStats(ctx core.UniversalContext) core.Response {
	userID := ctx.GetUserID()

	stats, err := m.arenaService.GetStats(userID)
	if err != nil {
		return core.NewMessage("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
	}

	text := fmt.Sprintf(`üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞—Ä–µ–Ω—ã</b>

‚öîÔ∏è –í—Å–µ–≥–æ –±–æ–µ–≤: %d
‚úÖ –ü–æ–±–µ–¥: %d
‚ùå –ü–æ—Ä–∞–∂–µ–Ω–∏–π: %d
üìà –†–µ–π—Ç–∏–Ω–≥: %d
üèÜ –ú–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ: #%d
üí∞ –ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –º–æ–Ω–µ—Ç: %d`,
		stats.TotalFights,
		stats.Wins,
		stats.Losses,
		stats.Rating,
		stats.Rank,
		stats.TotalEarned,
	)

	return core.NewMessage(text).
		WithParseMode(core.ParseModeHTML)
}

// === Event Handlers ===

func (m *ArenaModule) handleLevelUp(ctx context.Context, event core.Event) error {
	m.logger.Info("User leveled up", "user_id", event.UserID())
	// –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
	return nil
}

func (m *ArenaModule) handleFightCompleted(ctx context.Context, event core.Event) error {
	m.logger.Info("Fight completed",
		"user_id", event.UserID(),
		"winner", event.Data()["winner"],
	)
	// –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±–æ—è
	return nil
}

// === API Handlers ===

func (m *ArenaModule) apiGetOpponents(ctx context.Context, req core.APIRequest) (core.APIResponse, error) {
	opponents, err := m.arenaService.GetOpponents(req.UserID)
	if err != nil {
		return core.APIResponse{Status: 500, Error: err}, err
	}

	return core.APIResponse{
		Status: 200,
		Body:   opponents,
	}, nil
}

func (m *ArenaModule) apiStartFight(ctx context.Context, req core.APIRequest) (core.APIResponse, error) {
	// –ü–∞—Ä—Å–∏–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
	body := req.Body.(map[string]interface{})
	opponentID := int64(body["opponent_id"].(float64))

	result, err := m.arenaService.StartFight(req.UserID, opponentID)
	if err != nil {
		return core.APIResponse{Status: 500, Error: err}, err
	}

	return core.APIResponse{
		Status: 200,
		Body:   result,
	}, nil
}

func (m *ArenaModule) apiGetStats(ctx context.Context, req core.APIRequest) (core.APIResponse, error) {
	stats, err := m.arenaService.GetStats(req.UserID)
	if err != nil {
		return core.APIResponse{Status: 500, Error: err}, err
	}

	return core.APIResponse{
		Status: 200,
		Body:   stats,
	}, nil
}

// === Helper Methods ===

func (m *ArenaModule) formatFightResult(result *FightResult) string {
	var text string

	if result.Winner == "player" {
		text = "üéâ <b>–ü–æ–±–µ–¥–∞!</b>\n\n"
	} else {
		text = "üòî <b>–ü–æ—Ä–∞–∂–µ–Ω–∏–µ</b>\n\n"
	}

	text += fmt.Sprintf(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–æ—è:
‚Ä¢ –†–∞—É–Ω–¥–æ–≤: %d
‚Ä¢ –ù–∞–Ω–µ—Å–µ–Ω–æ —É—Ä–æ–Ω–∞: %d
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ —É—Ä–æ–Ω–∞: %d
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–¥–∞—Ä–æ–≤: %d

üí∞ –ù–∞–≥—Ä–∞–¥–∞: %d –º–æ–Ω–µ—Ç
üìà –†–µ–π—Ç–∏–Ω–≥: %+d`,
		result.Rounds,
		result.DamageDealt,
		result.DamageTaken,
		result.CriticalHits,
		result.Reward,
		result.RatingChange,
	)

	return text
}

// === Types ===

type Opponent struct {
	ID    int64  `json:"id"`
	Name  string `json:"name"`
	Level int    `json:"level"`
	Power int    `json:"power"`
}

type FightResult struct {
	Winner       string    `json:"winner"`
	Rounds       int       `json:"rounds"`
	DamageDealt  int       `json:"damage_dealt"`
	DamageTaken  int       `json:"damage_taken"`
	CriticalHits int       `json:"critical_hits"`
	Reward       int       `json:"reward"`
	RatingChange int       `json:"rating_change"`
	Timestamp    time.Time `json:"timestamp"`
}

type ArenaStats struct {
	TotalFights int `json:"total_fights"`
	Wins        int `json:"wins"`
	Losses      int `json:"losses"`
	Rating      int `json:"rating"`
	Rank        int `json:"rank"`
	TotalEarned int `json:"total_earned"`
}
