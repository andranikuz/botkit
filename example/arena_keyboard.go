package example

import (
	"fmt"
	"github.com/andranikuz/botkit/core"
)

// ArenaKeyboard –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –º–æ–¥—É–ª—è –∞—Ä–µ–Ω—ã
type ArenaKeyboard struct {
	buttons [][]core.Button
}

// NewArenaKeyboard —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞—Ä–µ–Ω—ã
func NewArenaKeyboard() *ArenaKeyboard {
	return &ArenaKeyboard{
		buttons: make([][]core.Button, 0),
	}
}

// Type –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
func (k *ArenaKeyboard) Type() core.KeyboardType {
	return core.KeyboardTypeInline
}

// Buttons –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–æ–ø–∫–∏
func (k *ArenaKeyboard) Buttons() [][]core.Button {
	return k.buttons
}

// Options –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
func (k *ArenaKeyboard) Options() core.KeyboardOptions {
	return core.KeyboardOptions{}
}

// Build –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
func (k *ArenaKeyboard) Build() core.Keyboard {
	return k
}

// MainMenu —Å–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞—Ä–µ–Ω—ã
func (k *ArenaKeyboard) MainMenu() *ArenaKeyboard {
	k.buttons = [][]core.Button{
		{
			{
				Text: "‚öîÔ∏è –í –±–æ–π",
				Type: core.ButtonTypeCallback,
				Route: &core.Route{
					Module: "arena",
					Action: "fight",
				},
			},
			{
				Text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
				Type: core.ButtonTypeCallback,
				Route: &core.Route{
					Module: "arena",
					Action: "stats",
				},
			},
		},
		{
			{
				Text: "üèÜ –†–µ–π—Ç–∏–Ω–≥",
				Type: core.ButtonTypeCallback,
				Route: &core.Route{
					Module: "arena",
					Action: "leaderboard",
				},
			},
			{
				Text: "‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞",
				Type: core.ButtonTypeCallback,
				Route: &core.Route{
					Module: "arena",
					Action: "rules",
				},
			},
		},
		{
			{
				Text: "‚¨ÖÔ∏è –í –≥–æ—Ä–æ–¥",
				Type: core.ButtonTypeCallback,
				Route: &core.Route{
					Module: "city",
					Action: "main",
				},
			},
		},
	}

	return k
}

// AddOpponent –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
func (k *ArenaKeyboard) AddOpponent(opp Opponent) *ArenaKeyboard {
	btn := core.Button{
		Text: fmt.Sprintf("%s (–£—Ä. %d)", opp.Name, opp.Level),
		Type: core.ButtonTypeCallback,
		Route: &core.Route{
			Module: "arena",
			Action: "opponent",
			Params: map[string]interface{}{
				"id": opp.ID,
			},
		},
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫—É
	if len(k.buttons) == 0 || len(k.buttons[len(k.buttons)-1]) >= 2 {
		k.buttons = append(k.buttons, []core.Button{btn})
	} else {
		lastRow := len(k.buttons) - 1
		k.buttons[lastRow] = append(k.buttons[lastRow], btn)
	}

	return k
}

// AddBackButton –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
func (k *ArenaKeyboard) AddBackButton() *ArenaKeyboard {
	k.buttons = append(k.buttons, []core.Button{
		{
			Text: "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
			Type: core.ButtonTypeCallback,
			Route: &core.Route{
				Module: "arena",
				Action: "back",
			},
		},
	})

	return k
}

// AfterFight –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –±–æ—è
func (k *ArenaKeyboard) AfterFight() *ArenaKeyboard {
	k.buttons = [][]core.Button{
		{
			{
				Text: "üîÑ –ï—â–µ –±–æ–π",
				Type: core.ButtonTypeCallback,
				Route: &core.Route{
					Module: "arena",
					Action: "fight",
				},
			},
			{
				Text: "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
				Type: core.ButtonTypeCallback,
				Route: &core.Route{
					Module: "arena",
					Action: "stats",
				},
			},
		},
		{
			{
				Text: "‚¨ÖÔ∏è –í –º–µ–Ω—é –∞—Ä–µ–Ω—ã",
				Type: core.ButtonTypeCallback,
				Route: &core.Route{
					Module: "arena",
					Action: "back",
				},
			},
		},
	}

	return k
}
